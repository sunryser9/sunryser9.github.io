<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Boot on JavaYou</title>
    <link>https://javayou.com/categories/spring-boot/</link>
    <description>Recent content in Spring Boot on JavaYou</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 Aug 2025 12:00:00 +0530</lastBuildDate>
    <atom:link href="https://javayou.com/categories/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>From Monolith to Microservices: A Spring Boot and Kubernetes Migration Guide</title>
      <link>https://javayou.com/posts/monolith-to-microservices-with-spring-boot/</link>
      <pubDate>Fri, 15 Aug 2025 12:00:00 +0530</pubDate>
      <guid>https://javayou.com/posts/monolith-to-microservices-with-spring-boot/</guid>
      <description>&lt;p&gt;Introduction: The Evolution of Modern Applications&#xA;For years, the monolithic architecture served as the backbone of countless enterprise applications. It�s a single, cohesive unit where all components�data, business logic, and UI�are tightly coupled. While this approach is simple to develop and deploy initially, it presents significant challenges as an application scales.&lt;/p&gt;&#xA;&lt;p&gt;This comprehensive guide will walk you through the journey of migrating a monolithic Spring Boot application to a resilient, scalable microservices architecture. We�ll cover the strategic decisions, technical challenges, and the role of Kubernetes in orchestrating this modern deployment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mastering the GraalVM: Ahead-of-Time (AOT) Compilation for Ultra-Fast, Low-Memory Spring Boot Applications</title>
      <link>https://javayou.com/posts/mastering-graalvm-for-spring-boot-aot/</link>
      <pubDate>Mon, 11 Aug 2025 09:00:00 +0530</pubDate>
      <guid>https://javayou.com/posts/mastering-graalvm-for-spring-boot-aot/</guid>
      <description>&lt;h1 id=&#34;mastering-the-graalvm-ahead-of-time-aot-compilation-for-ultra-fast-low-memory-spring-boot-applications&#34;&gt;Mastering the GraalVM: Ahead-of-Time (AOT) Compilation for Ultra-Fast, Low-Memory Spring Boot Applications&lt;/h1&gt;&#xA;&lt;p&gt;Welcome, JavaYou.com community! We&amp;rsquo;ve spent a lot of time discussing how to optimize the JVM, but what if we could bypass a large part of the JVM&amp;rsquo;s startup overhead entirely? What if your Spring Boot application could launch in milliseconds and use a fraction of the memory? This isn&amp;rsquo;t a fantasy; it&amp;rsquo;s the reality of &lt;strong&gt;Ahead-of-Time (AOT) compilation&lt;/strong&gt; with &lt;strong&gt;GraalVM&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Beyond ChatGPT: Building Intelligent LLM Agents and Tool-Using Applications in Java with Spring AI</title>
      <link>https://javayou.com/posts/building-intelligent-llm-agents-java-spring-ai/</link>
      <pubDate>Tue, 05 Aug 2025 10:00:00 +0530</pubDate>
      <guid>https://javayou.com/posts/building-intelligent-llm-agents-java-spring-ai/</guid>
      <description>&lt;h1 id=&#34;beyond-chatgpt-building-intelligent-llm-agents-and-tool-using-applications-in-java-with-spring-ai&#34;&gt;Beyond ChatGPT: Building Intelligent LLM Agents and Tool-Using Applications in Java with Spring AI&lt;/h1&gt;&#xA;&lt;p&gt;Welcome back, fellow Java innovators! In our last guide, we explored the foundational power of Generative AI and how Spring AI makes it incredibly easy to integrate Large Language Models (LLMs) into your Java applications. We touched on generating text, summarization, and basic Q&amp;amp;A. But what if you want your LLM to do more than just generate text? What if you need it to fetch real-time data, interact with your internal APIs, or perform complex, multi-step actions?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Optimizing JVM Metaspace for Dynamic Class Loading in Spring Boot Microservices</title>
      <link>https://javayou.com/posts/optimizing-jvm-metaspace-dynamic-class-loading/</link>
      <pubDate>Tue, 05 Aug 2025 09:00:00 +0530</pubDate>
      <guid>https://javayou.com/posts/optimizing-jvm-metaspace-dynamic-class-loading/</guid>
      <description>&lt;h1 id=&#34;optimizing-jvm-metaspace-for-dynamic-class-loading-in-spring-boot-microservices&#34;&gt;Optimizing JVM Metaspace for Dynamic Class Loading in Spring Boot Microservices&lt;/h1&gt;&#xA;&lt;p&gt;Welcome, advanced Java architects and site reliability engineers! In the complex landscape of modern microservices, especially those built with Spring Boot, ensuring predictable and stable performance is paramount. While heap memory is often the primary focus of optimization, the &lt;strong&gt;Metaspace&lt;/strong&gt; � where the JVM stores class metadata � frequently becomes an overlooked villain, silently leading to &lt;code&gt;OutOfMemoryError: Metaspace&lt;/code&gt; in long-running or dynamically evolving systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building Intelligent Java Applications: A Comprehensive Guide to Generative AI with Spring AI &amp; LLMs</title>
      <link>https://javayou.com/posts/building-intelligent-java-apps-ai-spring-ai/</link>
      <pubDate>Sun, 27 Jul 2025 16:20:00 +0530</pubDate>
      <guid>https://javayou.com/posts/building-intelligent-java-apps-ai-spring-ai/</guid>
      <description>&lt;h1 id=&#34;building-intelligent-java-applications-a-comprehensive-guide-to-generative-ai-with-spring-ai--llms&#34;&gt;Building Intelligent Java Applications: A Comprehensive Guide to Generative AI with Spring AI &amp;amp; LLMs&lt;/h1&gt;&#xA;&lt;p&gt;Welcome, forward-thinking Java developers! The world of software is undergoing a monumental shift, driven by the explosive growth of Artificial Intelligence, particularly &lt;strong&gt;Generative AI&lt;/strong&gt;. This isn&amp;rsquo;t just about buzzwords; it&amp;rsquo;s about fundamentally changing how applications are built, allowing them to understand, generate, and interact with human-like intelligence.&lt;/p&gt;&#xA;&lt;p&gt;You might be asking: &amp;ldquo;Where does Java fit into this exciting new landscape?&amp;rdquo; The answer is, at the very heart of it! Java, with its enterprise-grade stability, vast ecosystem, and proven scalability, is rapidly becoming a powerhouse for building production-ready AI applications. And the &lt;strong&gt;Spring AI&lt;/strong&gt; project is leading the charge, making it incredibly easy for Spring Boot developers to integrate Large Language Models (LLMs) and other AI capabilities into their existing architectures.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mastering Microservices with Spring Boot 3 &amp; Beyond: A Comprehensive Guide for Java Developers</title>
      <link>https://javayou.com/posts/mastering-microservices-spring-boot-3/</link>
      <pubDate>Sun, 27 Jul 2025 15:40:00 +0530</pubDate>
      <guid>https://javayou.com/posts/mastering-microservices-spring-boot-3/</guid>
      <description>&lt;h1 id=&#34;mastering-microservices-with-spring-boot-3--beyond-a-comprehensive-guide-for-java-developers&#34;&gt;Mastering Microservices with Spring Boot 3 &amp;amp; Beyond: A Comprehensive Guide for Java Developers&lt;/h1&gt;&#xA;&lt;p&gt;Welcome, fellow Java developers! Have you ever found yourself wrestling with a massive codebase, where a tiny change in one part of the system seems to ripple unpredictably through another? Or perhaps scaling a single component means scaling the entire monolithic application, even if only one small feature is getting all the traffic? If any of this sounds familiar, then the world of microservices is calling your name.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
